/*
 * 
 * Copyright 2014 Stefano Linguerri
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *    
 *    http://www.apache.org/licenses/LICENSE-2.0
 *    
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
using UnityEngine;
using System.Xml;
using System.Collections;
using System;
using Untiled2D;

class MapLoader : MonoBehaviour
{
    public KeyCode printInfoKey;
    public KeyCode generateTiles;
    public GUIText infolabel;
    private Map map;
    //
    private Texture2D tilesTexture;
    private int TILEWIDTH = 0;
    private int TILEHEIGHT = 0;
 
    void Start ()
    {
        //  int tileCountX = tilesTexture.width / TILEWIDTH;
        //  int tileCountY = tilesTexture.height / TILEHEIGHT;
        
        string xmldata = System.IO.File.ReadAllText (Application.streamingAssetsPath + "/Maps/demomap.tmx");

        //Debug.Log ("Loaded following XML " + xmldata);
    
        //Create a new XML document out of the loaded data
        XmlDocument xmlDoc = new XmlDocument ();
        xmlDoc.LoadXml (xmldata);
             
        map = CreateMap (xmlDoc.SelectNodes ("map"));

        TILEHEIGHT = map.tileheight;
        TILEWIDTH = map.tilewidth;

        tilesTexture = new Texture2D (map.imagewidth, map.imageheight);
        tilesTexture.LoadImage (System.IO.File.ReadAllBytes (Application.streamingAssetsPath + "/Maps/" + map.image));
        tilesTexture.name = "Tileset"; 

        
    }
    
    // Update is called once per frame
    void Update ()
    {
        if (Input.GetKeyDown (printInfoKey)) {  
            PrintMapInfo (map);
            if (infolabel != null) {
                infolabel.text = "MAP " + map.ToString () + " Tiles on layer 0 " + map.GetLayer (0).getTiles ().Count;
            }
        }

        if (Input.GetKeyDown (generateTiles)) {          
            if (infolabel != null) {
                infolabel.text = "Loaded Prefabs ";
                CreateTile (2, 0.0f, 0.0f, TILEWIDTH, TILEHEIGHT);
            }
        }

    }
    
    private Map CreateMap (XmlNodeList nodes)
    {
        Map map = new Map ();

        foreach (XmlNode node in nodes) {

            //Map Info
            map.version = (node.Attributes.GetNamedItem ("version").InnerText);
            map.orientation = (node.Attributes.GetNamedItem ("orientation").InnerText);
            map.width = (Convert.ToInt16 (node.Attributes.GetNamedItem ("width").InnerText));
            map.height = (Convert.ToInt16 (node.Attributes.GetNamedItem ("height").InnerText));
            //Tile info

            map.tilewidth = (Convert.ToInt16 (node.Attributes.GetNamedItem ("tilewidth").InnerText));
            map.tileheight = (Convert.ToInt16 (node.Attributes.GetNamedItem ("tileheight").InnerText));
      
            var imageNode = node.SelectSingleNode ("//image");

            map.image = imageNode.Attributes ["source"].Value;
            map.imagewidth = Convert.ToInt16 (imageNode.Attributes ["width"].Value);
            map.imageheight = Convert.ToInt16 (imageNode.Attributes ["height"].Value);

            //Loop the layers
            foreach (XmlNode aLayerNode in node.SelectNodes("layer")) {
                string layerName = aLayerNode.Attributes ["name"].Value;
                Layer aLayer = new Layer (layerName); 
                //loop the tiles
                foreach (XmlNode aTile in node.SelectNodes("//tile")) {
                    Tile t = new Tile ();
                    t.gid = Convert.ToInt16 (aTile.Attributes ["gid"].Value);
                    aLayer.AddTile (t);
                }
                map.AddLayer (aLayer);
            }
      
        }

        return map;
    }
 

    /// <summary> 
    /// Enter description for method bb. 
    /// ID string generated is "M:N.X.bb(System.String,System.Int32@,System.Void*)".
    /// </summary> 
    /// <param name="gid">Describe parameter.</param>
    /// <param name="x">Describe parameter.</param>
    /// <param name="y">Describe parameter.</param>
    void CreateTile (int gid, float x, float y, int TILEWIDTH, int TILEHEIGHT)
    {
        /*
        self.tilescols = self.image.width / self.tilewidth
        self.tilesrows = self.image.height / self.tileheight

        local row = math.ceil(tileid / self.tilescols) - 1 // -- Returns the smallest integer larger than or equal to the division result

        local moduleRows = tileid % self.tilescols

        local col

        if (moduleRows > 0) then
            col = moduleRows - 1
        else
            col = self.tilescols - 1
        end
        
        local srcXMin = col * self.tilewidth
        local srcXMax = srcXMin + self.tilewidth
        
        local srcYMin = row * self.tileheight
        local srcYMax = srcYMin + self.tileheight
        */
        int tiles_cols = map.imagewidth / TILEWIDTH;
        int tiles_rows = map.imageheight / TILEHEIGHT;

        decimal i = gid / tiles_cols;
        int row = (int) Math.Ceiling (i);

        int moduleRows = gid % tiles_cols;

        int col =0;   

        if (moduleRows > 0) {
            col = moduleRows - 1;
        }else{
            col = tiles_cols - 1;
        }

        int tile_x = col * TILEWIDTH;
        int tile_y = row * TILEHEIGHT;

        Texture2D tileTexture = getTileTexture2D (tile_x, tile_y, TILEWIDTH, TILEHEIGHT); //zero is left/right

        // int x = tilesTexture.width;
        // int y = tilesTexture.height;

        GameObject newTile = Instantiate (Resources.Load ("Dummy")) as GameObject;
        newTile.name = "Tile g:" + gid + " at (" + x + ":" + y + ")";
        SpriteRenderer renderer = newTile.AddComponent<SpriteRenderer> ();
        Sprite sprite = Sprite.Create (tileTexture, new Rect (tile_x, tile_y-TILEHEIGHT, TILEWIDTH, TILEHEIGHT), new Vector2 (0f, 0f), 100);
        //in unity 2D always 100
        sprite.name = "Demo";
        renderer.sprite = sprite;
        newTile.transform.position = new Vector3 (x, y, 0.0f);
    }

    public Texture2D getTileTexture2D (int x, int y, int width, int height)
    {
        Color[] pixels = tilesTexture.GetPixels (x, y, width, height);
        // get the block of pixels
        Texture2D aTileTexture = new Texture2D (width, height);
        // create new texture to copy the pixels to it
        aTileTexture.SetPixels (pixels);
        aTileTexture.Apply ();
        // important to save changes
        return aTileTexture;
    }

    private void PrintMapInfo (Map map)
    {
        Debug.Log ("Version :" + map.version);
        Debug.Log ("Width   :" + map.width);
        Debug.Log ("Height  :" + map.height);    
        map.GetLayer (0);
    }
  
}
